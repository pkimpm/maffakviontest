using UnityEngine;

/// <summary>
/// –ë–ª–æ–∫–∏—Ä—É–µ—Ç –≤–µ—Å—å UI –ø—Ä–∏ –ø–æ—Ç–µ—Ä–µ —Ñ–æ–∫—É—Å–∞ –æ–∫–Ω–∞
/// </summary>
public class FocusManager : MonoBehaviour
{
    public static FocusManager Instance { get; private set; }

    [Tooltip("–ü–µ—Ä–µ—Ç–∞—â–∏—Ç–µ FocusBlocker –∏–∑ —Å—Ü–µ–Ω—ã")]
    [SerializeField] private CanvasGroup focusBlocker;

    // üî• –ü–£–ë–õ–ò–ß–ù–´–ô –§–õ–ê–ì: –î—Ä—É–≥–∏–µ —Å–∫—Ä–∏–ø—Ç—ã –º–æ–≥—É—Ç –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Ñ–æ–∫—É—Å–∞
    public bool IsApplicationFocused { get; private set; } = true;

    private void Awake()
    {
        if (Instance == null)
        {
            Instance = this;
            DontDestroyOnLoad(gameObject);
        }
        else
        {
            Destroy(gameObject);
            return;
        }

        if (focusBlocker == null)
        {
            Debug.LogError("‚ùå FocusBlocker –Ω–µ –Ω–∞–∑–Ω–∞—á–µ–Ω!");
            enabled = false;
            return;
        }

        focusBlocker.alpha = 0;
        focusBlocker.blocksRaycasts = false;
    }

    private void Update()
    {
        if (focusBlocker == null) return;

        bool isFocused = Application.isFocused;

        if (IsApplicationFocused != isFocused)
        {
            IsApplicationFocused = isFocused;
        }

        bool shouldBlock = !isFocused;

        if (focusBlocker.blocksRaycasts != shouldBlock)
        {
            focusBlocker.blocksRaycasts = shouldBlock;
            
            if (shouldBlock)
            {
                focusBlocker.transform.SetAsLastSibling();
                Debug.Log("ü™ü –§–æ–∫—É—Å –ø–æ—Ç–µ—Ä—è–Ω. UI –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω.");
            }
            else
            {
                Debug.Log("ü™ü –§–æ–∫—É—Å –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. UI —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω.");
            }
        }
    }
}